<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE html>
<html lang="en" dir="ltr" id="developer-mozilla-org"><body id="docs" class="section-docs en ltr yui-skin-sam PageDW-enJavaScriptReferenceGlobalObjectsProxy" role="document">&#13;
<!--[if lte IE 8]>
<noscript><div class="global-notice">
<p><strong>Warning:</strong> The Mozilla Developer Network website employs emerging web standards that may not be fully supported in some versions of MicroSoft Internet Explorer. You can improve your experience of this website by enabling JavaScript.</p>
</div></noscript>
<![endif]-->&#13;
<noscript><div class="noscript">This application requires Javascript to be enabled.</div></noscript>&#13;
<section id="content"><div class="wrap">&#13;
  <div id="content-main" class="full">&#13;
&#13;
    &#13;
        &#13;
    <article class="article PageDW-enJavaScriptReferenceGlobalObjectsProxy" role="main"><div class="page-title hideforedit">&#13;
              <h1 class="first" id="title">Proxy</h1>            &#13;
      &#13;
              </div>&#13;
      &#13;
    <div class="page-content boxed">&#13;
&#13;
     &#13;
       &#13;
    &#13;
            &#13;
      <div id="page-top"><div class="pageText" id="pageText"><p>
</p><div style="border: 1px solid #818151; background-color: #FFFFE1; font-weight: bold; text-align: center; padding: 0px 10px 0px 10px; margin: 10px 0px 10px 0px;"><p style="margin: 4px 0px 4px 0px;">Introduced in <a rel="custom" href="https://developer.mozilla.org/en/JavaScript/New_in_JavaScript/1.8.5">JavaScript 1.8.5</a></p></div>
<p>

</p><div style="overflow:hidden; border: 1px solid #FFB752; background-color: #FEE3BC; font-weight: bold; text-align: center; padding: 0px 10px 0px 10px; margin: 10px 0px 10px 0px;"><p style="margin: 4px 0px 4px 0px;">Non-standard</p></div>
<p><span class="lang lang-en">
<div class="warning" style="overflow:hidden; padding: 0.7em; min-height: 103px;"><img style="float: left;" alt="" src="https://developer.mozilla.org/@api/deki/files/283/=Nuvola_apps_important.png"/><div style="margin-left: 130px; margin-top: 0.3em;"><strong>Warning:</strong> The SpiderMonkey Proxy implementation is a prototype and the Proxy API and semantics specifications are unstable. The SpiderMonkey implementation may not reflect the latest specification draft. It is subject to change anytime. It is provided as an experimental feature. Do not rely on it for production code.</div>
</div>
</span>   </p>
<p><span class="lang lang-en">
<div style="margin: 1em 0px; padding: 1em; background-color: rgb(255, 255, 204); text-align: center;"><strong>DRAFT</strong>
<div style="font-size: x-small;">This page is not complete.</div>
</div>
</span>
</p>
<div id="section_1"><span id="Introduction"/><h2 class="editable">Introduction</h2>
<p>Proxies are objects for which the programmer has to define the semantics in JavaScript. The default object semantics are implemented in the JavaScript engine, often written in lower-level languages like C++. Proxies let the programmer define most of the behavior of an object in JavaScript. They are said to provide a <strong>meta-programming API</strong>.</p>
</div><div id="section_2"><span id="Terminology"/><h2 class="editable">Terminology</h2>
<dl><dt>catch-all mechanism (or "intercession API")</dt> <dd>The technical term for this feature.</dd> <dt>handler</dt> <dd>The object that intercepts properties.</dd> <dt>proxy</dt> <dd>The object whose properties are being intercepted.</dd> <dt>proxy factory</dt> <dd>The object or method that creates intercessive proxies.</dd> <dt>traps</dt> <dd>The methods that provide property access. This is analogous to the concept of traps in operating systems.</dd>
</dl><p>Proxies can be either be <strong>trapping</strong> or <strong>fixed</strong>.</p>
</div><div id="section_3"><span id="Proxy_API"/><h2 class="editable">Proxy API</h2>
<p>Catch-alls can be defined only on distinct proxy objects, controlled by a handler object. There are two kinds of proxies:</p>
<p>object proxies</p>
&#13;
          <pre name="code" class="js">var proxy = Proxy.create(handler, proto);</pre>&#13;
        
<p>and function proxies :</p>
&#13;
          <pre name="code" class="js">var proxy = Proxy.createFunction(handler, callTrap, constructTrap);</pre>&#13;
        
<p>Where:</p>
<ul><li><code>proto</code> is an optional object representing the proxy’s prototype (defaults to <code>null</code> if none is provided).</li> <li><code>callTrap</code> is a variable-argument <code>function(args) { return any; }</code> that reifies “<code>proxy(args)</code>”. Note: The this-binding of the <code>callTrap</code> function is the this-binding of the call-site.</li> <li><code>constructTrap</code> is an optional variable-argument <code>function(args) { return any-object; }</code> that reifies “<code>new proxy(args)</code>”. The this-binding of the <code>constructTrap</code> is either <code>undefined</code> (in strict mode) or the global object (in non-strict mode). If no <code>constructTrap</code> is provided, performing <code>new proxy(...args)</code> calls the proxy’s <code>callTrap</code> with <code>this</code> bound to a new object delegating to the proxy's prototype.</li> <li><code>handler</code> is an object that implements the handler API.</li>
</ul></div><div id="section_4"><span id="Handler_API"/><h2 class="editable">Handler API</h2>
<p>There are two kinds of traps: <strong>fundamental</strong> and <strong>derived</strong> traps. If one of the fundamental traps isn't implemented and the proxy is used in a way that expects the fundamental trap to be defined, then an error is thrown. If a derived trap is implemented, then that trap's code is called whenever the corresponding behavior happens on the proxy. If the derived trap is undefined, a default implementation using the fundamental traps is used. In other words: fundamental traps are required, derived traps are optional.</p>
<div id="section_5"><span id="Fundamental_traps"/><h4 class="editable">Fundamental traps</h4>
<table class="standard-table"><tbody><tr><td class="header">Emulated JavaScript code</td> <td class="header">Handler method</td> <td class="header">Description</td> </tr><tr><td><code>Object.getOwnPropertyDescriptor(proxy, name)</code></td> <td><code><strong>getOwnPropertyDescriptor:</strong> function(name) -&gt; PropertyDescriptor | undefined</code></td> <td>Should return a valid property descriptor object, or <code>undefined</code> to indicate that no property with <code>name</code> exists in the emulated object.</td> </tr><tr><td><code>Object.getPropertyDescriptor(proxy, name)</code></td> <td><code><strong>getPropertyDescriptor:</strong> function(name) -&gt; PropertyDescriptor | undefined</code></td> <td>This function doesn't exist in ECMAScript 5. Like <code>getOwnPropertyDescriptor</code>, but should also search the prototype chain.</td> </tr><tr><td><code>Object.getOwnPropertyNames(proxy)</code></td> <td><code><strong>getOwnPropertyNames:</strong> function() -&gt; Strings Array</code></td> <td>Return an array of all own (non-inherited) property names of the emulated object.</td> </tr><tr><td><code>Object.getPropertyNames(proxy)</code></td> <td><code><strong>getPropertyNames:</strong> function() -&gt; Strings Array</code></td> <td>This function doesn't exist in ECMAScript 5. Like <code>getOwnPropertyNames</code>, but should also return non-overridden inherited properties.</td> </tr><tr><td><code>Object.defineProperty(proxy,name,pd)</code></td> <td><code><strong>defineProperty:</strong> function(name, propertyDescriptor) -&gt; any</code></td> <td>Define a new property whose attributes are determined by the given <code>propertyDescriptor</code>. The return value of this method is ignored.</td> </tr><tr><td><code>delete proxy.name</code></td> <td><code><strong>delete:</strong> function(name) -&gt; boolean</code></td> <td>Delete the named property from the proxy. The boolean return value of this method should indicate whether or not the <code>name</code> property was successfully deleted.</td> </tr><tr><td> <p><code>Object.freeze(proxy)</code></p> <p><code>Object.seal(proxy)</code></p> <p><code>Object.preventExtensions(proxy)</code></p> </td> <td><code><strong>fix:</strong> function() -&gt; PropertyDescriptor map (indexed on property names) | undefined</code></td> <td> <p>Should return an object that maps property names to property descriptors. After a call to <code>fix()</code>, the proxy becomes a regular (non-proxy) object with the properties listed in the return value. The handler is no longer used. Moreover, the respective method (<code>freeze()</code>, <code>seal()</code>, or <code>preventExtension()</code>) is immediately called on the fixed object. Note: the fixed object has the same object identity as the proxy object.</p> <p>If <code>fix()</code> returns <code>undefined</code>, the call throws a <code>TypeError</code> exception.</p> </td> </tr></tbody></table></div><div id="section_6"><span id="Derived_traps"/><h4 class="editable">Derived traps</h4>
<p>Default implementation refers to the code that is called for that trap when the trap isn't explicitly defined. In these functions, <code>this</code> refers to the handler object.</p>
<table class="standard-table"><tbody><tr><td class="header">Emulated JavaScript code</td> <td class="header">Handler method</td> <td class="header">Default implementation</td> <td class="header">Description</td> </tr><tr><td><code>name in proxy</code></td> <td><code><strong>has:</strong> function(name) -&gt; boolean</code></td> <td> &#13;
          <pre name="code" class="js">function(name) { 
  return !!this.getPropertyDescriptor(name);
}</pre>&#13;
         </td> <td> </td> </tr><tr><td><code>Object.prototype.hasOwnProperty.call(proxy, name)</code></td> <td><code><strong>hasOwn: </strong>function(name) -&gt; boolean</code></td> <td> &#13;
          <pre name="code" class="js">function(name) { 
  return !!this.getOwnPropertyDescriptor(name); 
}</pre>&#13;
         </td> <td> </td> </tr><tr><td> <p><code>proxy.name</code> (in the context of "getting the value")</p> <p><code>receiver.name</code> (if <code>receiver</code> inherits from a proxy and does not override <code>name</code>)</p> </td> <td><code><strong>get:</strong> function(receiver, name) -&gt; any</code></td> <td> &#13;
          <pre name="code" class="js">function(receiver, name) {
  var desc = this.getPropertyDescriptor(name);
  if (desc === undefined) {
    return undefined;
  }
  if ('value' in desc) {
    return desc.value;
  } else {
    if (desc.get === undefined) {
      return undefined;
    }
    return desc.get.call(receiver);
  }
}</pre>&#13;
         </td> <td> <code>receiver</code> is either the proxy or an object that inherits from the proxy.</td> </tr><tr><td> <p><code>proxy.name = val</code> (in the context of "setting the value")</p> <p><code style="font: normal normal normal 100%/normal 'Courier New', 'Andale Mono', monospace; color: inherit; font-weight: inherit; ">receiver.name = val</code> (if <code>receiver</code> inherits from a proxy and does not override <code style="font: normal normal normal 100%/normal 'Courier New', 'Andale Mono', monospace; color: inherit; font-weight: inherit; ">name</code>)</p> </td> <td><code><strong>set:</strong> function(receiver, name, val) -&gt; boolean</code></td> <td> &#13;
          <pre name="code" class="js">function(receiver, name, val) {
  var desc = this.getOwnPropertyDescriptor(name);
  if (desc) {
    if ('writable' in desc) {
      if (desc.writable) {
        desc.value = val;
        this.defineProperty(name, desc);
        return true;
      } else {
        return false;
      }
    } else { // accessor
      if (desc.set) {
        desc.set.call(receiver, val);
        return true;
      } else {
        return false;
      }
    }
  }
  desc = this.getPropertyDescriptor(name);
  if (desc) {
    if ('writable' in desc) {
      if (desc.writable) {
        // fall through
      } else {
        return false;
      }
    } else { // accessor
      if (desc.set) {
        desc.set.call(receiver, val);
        return true;
      } else {
        return false;
      }
    }
  }
  this.defineProperty(name, {
    value: val, 
    writable: true, 
    enumerable: true, 
    configurable: true});
  return true;
}</pre>&#13;
         </td> <td> <code style="font: normal normal normal 100%/normal 'Courier New', 'Andale Mono', monospace; color: inherit; font-weight: inherit; ">receiver</code> is either the proxy or an object that inherits from the proxy.</td> </tr><tr><td><code>for(prop in proxy){...}</code></td> <td><code><strong>enumerate:</strong> function() -&gt; String Array</code></td> <td> &#13;
          <pre name="code" class="js">function() {
  return this.getPropertyNames().filter(
    function (name) {
      return this.getPropertyDescriptor(name).enumerable
    }
  );
}</pre>&#13;
         </td> <td>From the proxy user point of view, properties appear in the for..in loop in the same order as they are in the returned array.</td> </tr><tr><td><code>Object.keys(proxy)</code></td> <td><code><strong>keys:</strong> function() -&gt; String Array</code></td> <td> &#13;
          <pre name="code" class="js">function() {
  return this.getOwnPropertyNames().filter(
    function (name) {
      return this.getOwnPropertyDescriptor(name).enumerable
    }
  );
}</pre>&#13;
         </td> <td> </td> </tr></tbody></table></div></div><div id="section_7"><span id="Invariants"/><h2 class="editable">Invariants</h2>
<p>Even though proxies provide a lot of power to users, some operations that are not trapped in order to keep the language consistency:</p>
<ul><li>The triple equal (<code>===</code>) operator isn't trapped. <code>p1 === p2</code> if and only if <code>p1</code> and <code>p2</code> refer to the same proxy. Fixing a proxy does not alter its object identity (the object “generated” by the handler during fixing does not have its own object identity, it retains the object identity of the proxy, upholding the illusion that the proxy “becomes” the object).</li> <li><code>Object.getPrototypeOf(proxy)</code> returns the prototype <code>proxy</code> has been initialized with for an object proxy and <code>Function.prototype</code> for a function proxy.</li> <li>typeof <ul><li><code>typeof anObjectProxy === “object”</code></li> <li><code>typeof aFunctionProxy === “function”</code></li> </ul></li> <li>instanceof <ul><li><code>anObjectProxy instanceof C</code> if and only if the prototype <code>anObjectProxy</code> has been initialized with equals or inherits from <code>C.prototype</code></li> <li><code>aFunctionProxy instanceof Function === true</code></li> </ul></li>
</ul></div><div id="section_8"><span id="Common_mistakes_and_misunderstanding"/><h2 class="editable">Common mistakes and misunderstanding</h2>
<p>When starting using proxies, there are often a few beginners mistakes and misunderstandings:</p>
<ul><li><strong>Not implementing all traps.</strong> Proxies are, by default, "semanticless" objects. If a trap isn't implemented, then if it's a derived trap, the default implementation is used. However if a fundamental trap is unimplemented, then a call to this trap will throw a TypeError. To make sure no error is thrown when your object is used, you have to implement <u><strong>at least all fundamental traps</strong></u>.</li> <li><strong>Unwanted recursion.</strong> Be careful of how you use the <code>receiver</code> argument in 'get' and 'set' traps. &#13;
          <pre name="code" class="js">var p = Proxy.create({get: function(receiver, name) {
  print(receiver); // looks for receiver's toString method. receiver turns out to be the proxy, so calling print results in calling the get trap.
  return "something";
} });

var q = p.azerty; // infinite loop</pre>&#13;
         </li> <li><strong>The <code>receiver</code> argument in 'get' and 'set' traps may not be the proxy itself</strong>: &#13;
          <pre name="code" class="js">var proxy;

var handler = {
    has: function (name) {
        return name == 'foo';
    },
    get: function (rcvr, name) {
        if (name != 'foo')
            return undefined;
        print(proxy !== rcvr);
        return "bye";
    },
};

proxy = Proxy.create(handler);

var c = Object.create(proxy);

print(c.foo); // prints: 'true' (from "proxy !== rcvr") and 'bye' (from "c.foo").
// In this example, the get trap rcvr argument is the c object while proxy is its prototype</pre>&#13;
         </li>
</ul></div><div id="section_9"><span id="Examples"/><h2 class="editable">Examples</h2>
<div id="section_10"><span id="Very_simple_example"/><h3 class="editable">Very simple example</h3>
<p>A trap is called almost each time something happens to your proxy (that is used like an object). Here is an example:</p>
&#13;
          <pre name="code" class="js">var incompleteHandler = {get:function(myProxy, name){
                               alert('Property ' + name + ' accessed.'); 
                               return 1;
                             }
                        };
var p = Proxy.create(incompleteHandler);
var q = p.blabla; // alerts 'Property blabla accessed' and 1 is assigned to q
p.azerty = "Trying to set a property"; // throws an error since neither the set trap or the fundamental trap used in the set trap are implemented</pre>&#13;
        
</div><div id="section_11"><span id="No-op_forwarding_proxy"/><h3 class="editable">No-op forwarding proxy</h3>
<p>In this example, we are using a native JavaScript object to which our proxy will forward all operations that are applied to it.</p>
&#13;
          <pre name="code" class="js">function handlerMaker(obj) {
  return {
    // Fundamental traps
    getOwnPropertyDescriptor: function(name) {
      var desc = Object.getOwnPropertyDescriptor(obj, name);
      // a trapping proxy's properties must always be configurable
      if (desc !== undefined) { desc.configurable = true; }
      return desc;
    },
    getPropertyDescriptor:  function(name) {
      var desc = Object.getPropertyDescriptor(obj, name); // not in ES5
      // a trapping proxy's properties must always be configurable
      if (desc !== undefined) { desc.configurable = true; }
      return desc;
    },
    getOwnPropertyNames: function() {
      return Object.getOwnPropertyNames(obj);
    },
    getPropertyNames: function() {
      return Object.getPropertyNames(obj);                // not in ES5
    },
    defineProperty: function(name, desc) {
      Object.defineProperty(obj, name, desc);
    },
    delete:       function(name) { return delete obj[name]; },   
    fix:          function() {
      if (Object.isFrozen(obj)) {
        return Object.getOwnPropertyNames(obj).map(function(name) {
          return Object.getOwnPropertyDescriptor(obj, name);
        });
      }
      // As long as obj is not frozen, the proxy won't allow itself to be fixed
      return undefined; // will cause a TypeError to be thrown
    },
   
    // derived traps
    has:          function(name) { return name in obj; },
    hasOwn:       function(name) { return Object.prototype.hasOwnProperty.call(obj, name); },
    get:          function(receiver, name) { return obj[name]; },
    set:          function(receiver, name, val) { obj[name] = val; return true; }, // bad behavior when set fails in non-strict mode
    enumerate:    function() {
      var result = [];
      for (name in obj) { result.push(name); };
      return result;
    },
    keys: function() { return Object.keys(obj) }
  };
}

// ...

var o = Object.create({});
var proxy = Proxy.create(handlerMaker(o));

proxy.blabla = 12; // Thanks to the forwarding, o now has a 'blabla' property which value is 12
o.blabla++; // just incrementing o.blabla

alert(proxy.blabla); // alerts 13: the getting operation is forwarded to o which returns 13.</pre>&#13;
        
</div></div><div id="section_12"><span id="See_also"/><h2 class="editable">See also</h2>
<ul><li><a class="external" rel="external" href="http://jsconf.eu/2010/speaker/be_proxy_objects.html" title="http://jsconf.eu/2010/speaker/be_proxy_objects.html" target="_blank">"Proxies are awesome" Brendan Eich presentation at JSConf</a> (<a class="external" rel="external" href="http://www.slideshare.net/BrendanEich/metaprog-5303821" title="http://www.slideshare.net/BrendanEich/metaprog-5303821" target="_blank">slides</a>)</li> <li><a class="external" rel="external" href="http://wiki.ecmascript.org/doku.php?id=harmony:proxies" title="http://wiki.ecmascript.org/doku.php?id=harmony:proxies" target="_blank">ECMAScript Harmony Proxy proposal page</a> and <a class="external" rel="external" href="http://wiki.ecmascript.org/doku.php?id=harmony:proxies_semantics" title="http://wiki.ecmascript.org/doku.php?id=harmony:proxies_semantics" target="_blank">ECMAScript Harmony proxy semantics page</a></li> <li><a class="external" rel="external" href="http://soft.vub.ac.be/~tvcutsem/proxies/" title="http://soft.vub.ac.be/~tvcutsem/proxies/" target="_blank">Tutorial on proxies</a></li>
</ul></div><div id="section_13"><span id="Licensing_note"/><h2 class="editable">Licensing note</h2>
<p>Some content (text, examples) in this page has been copied or adapted from the <a class="external" rel="external" href="http://wiki.ecmascript.org/doku.php" title="http://wiki.ecmascript.org/doku.php" target="_blank">ECMAScript wiki</a> which content is licensed <a class="external" rel="external" href="http://creativecommons.org/licenses/by-nc-sa/2.0/" title="http://creativecommons.org/licenses/by-nc-sa/2.0/" target="_blank">CC 2.0 BY-NC-SA</a></p></div></div></div>&#13;
            <section class="page-meta"><section id="page-tags"><h2>Tags <span class="sub">(1)</span></h2>&#13;
              <a href="/index.php?title=Special:Tags&amp;pageId=66110" class="disabled" onclick="return false;" id="deki-page-tags-toggleview">Edit tags</a>              <div id="deki-page-tags"><ul class="tags"><li><a href="https://developer.mozilla.org/Special:Tags?tag=NeedsJSVersion" title="NeedsJSVersion" tagid="2606" class="text">NeedsJSVersion</a></li></ul></div>          </section><section id="page-files"><h2>Attachments <span class="sub">(0)</span></h2>&#13;
            <div id="pageFiles"><div class="nofiles"> </div></div>            <div id="deki-image-gallery-lite"><table class="table empty" width="100%" cellspacing="0" cellpadding="0" border="0"><colgroup><col width="33%"/><col width="33%"/><col width="33%"/></colgroup><tbody><tr class="bg1"><th class="col1" colspan="3">Images 0</th></tr><tr class="bg2"><td class="col1 empty" colspan="3">No images to display in the gallery.</td></tr></tbody></table></div>            <p class="add"><a title="Attach file" class="disabled ">Attach file</a></p>&#13;
          </section></section></div>&#13;
&#13;
    </article><p class="last-mod hideforedit">&#13;
      Page last modified <a href="/index.php?title=en/JavaScript/Reference/Global_Objects/Proxy&amp;action=history" title="21:03, 21 Oct 2011">21:03, 21 Oct 2011</a> by <a href="/User:BlindWanderer" class="link-user" rel="internal">BlindWanderer</a>    </p>&#13;
&#13;
  </div><!-- /#content-main -->&#13;
&#13;
</div><!-- /.wrap -->&#13;
</section><!-- /#content --><div class="ui-msg-wrap" id="MTMessage" style="display: none;">
	<div class="ui-msg ui-errormsg" id="MTMessageStyle">
		<div class="ui-msg-opt">
			<ul><li><a href="#" class="dismiss" onclick="return MTMessage.Hide();">dismiss message</a></li>
				<li><a href="#" class="details" id="MTMessageDetailsLink" onclick="return MTMessage.ShowDetails(this);">view details</a></li>
			</ul><div class="ui-msg-autoclose">
				<span id="MTMessageUnpaused" style="display: inline;">Message will close by itself in <span id="MTMessageTimer"/> seconds</span>
				<span id="MTMessagePaused" style="display: none;">Message timer has been stopped</span>
			</div>
		</div>
		<div class="ui-msg-header" id="MTMessageHeader"/>
		<div class="ui-msg-desc" id="MTMessageDesc"/>
		<div class="ui-msg-desc" id="MTMessageDetails" style="display: none;">
			<p>Viewing Details:</p>
		</div>
	</div>
</div><!-- Served by pm-dekiwiki01.mozilla.org in 0.97 secs. --><!--
	Verb      Path                                              Time(ms)       API Stats
	GET       /deki/site/settings                                  24.72       request-time-ms=20; mysql-queries=2; mysql-time-ms=18; cache-ratio=0.00; cache-hit=0; cache-miss=-1; cache-del=0; cache-ins=1;
	GET       /deki/users/=Anonymous                                8.08       request-time-ms=5; mysql-queries=4; mysql-time-ms=3; cache-ratio=-0.67; cache-hit=2; cache-miss=-5; cache-del=0; cache-ins=5;
	GET       /deki/license                                         7.76       request-time-ms=3; mysql-queries=2; mysql-time-ms=1; cache-ratio=-0.50; cache-hit=1; cache-miss=-3; cache-del=0; cache-ins=3;
	GET       /deki/pages/66110/contents                          404.15       request-time-ms=401; mysql-queries=31; mysql-time-ms=56; cache-ratio=2.45; cache-hit=49; cache-miss=-29; cache-del=0; cache-ins=29;
	GET       /deki/pages/66110                                    57.52       request-time-ms=47; mysql-queries=21; mysql-time-ms=29; cache-ratio=-25.00; cache-hit=25; cache-miss=-26; cache-del=0; cache-ins=26;
	GET       /deki/pages/66110/info                                7.30       request-time-ms=4; mysql-queries=3; mysql-time-ms=2; cache-ratio=-0.67; cache-hit=2; cache-miss=-5; cache-del=0; cache-ins=5;
	GET       /deki/pages/66110/tags                               11.20       request-time-ms=7; mysql-queries=5; mysql-time-ms=5; cache-ratio=-0.75; cache-hit=3; cache-miss=-7; cache-del=0; cache-ins=7;
	GET       /deki/site/properties                                17.61       request-time-ms=13; mysql-queries=4; mysql-time-ms=9; cache-ratio=-0.25; cache-hit=1; cache-miss=-5; cache-del=0; cache-ins=5;
	GET       /deki/site/nav/=en%252FJavaScript%252FReference%252FGlobal%2BObjects%252FProxy/full   341.39       request-time-ms=337; mysql-queries=6; mysql-time-ms=332; cache-ratio=-6.00; cache-hit=6; cache-miss=-7; cache-del=0; cache-ins=7;
	GET       /deki/pages/66110/tags                               28.55       request-time-ms=6; mysql-queries=5; mysql-time-ms=5; cache-ratio=-0.75; cache-hit=3; cache-miss=-7; cache-del=0; cache-ins=7;
	                                                             =======
	                                                     Total:   908.27      
	                                                     Ideal:   879.72      
--><div id="popupMessage"/> <div id="popupMask"/>&#13;
<div id="menuFiller"/>&#13;
<div id="bodyHeight"/>&#13;
&#13;
<noscript>&#13;
<div><img alt="DCSIMG" id="DCSIMG" width="1" height="1" src="https://statse.webtrendslive.com/dcs8yrjuavz5bdaun34r2o8bi_8o8x/njs.gif?dcsuri=/nojavascript&amp;WT.js=No&amp;WT.tv=8.6.2"/></div>&#13;
</noscript>&#13;
<!-- END OF SmartSource Data Collector TAG -->&#13;
&#13;
</body></html>
